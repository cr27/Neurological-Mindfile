
package radiobutton;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


public class DbConnection 
{
    
    private final static String url = "jdbc:postgresql://mydbinstance1.c2noctxzqt8q.us-west-1.rds.amazonaws.com/csvdata";
    private final static String user = "postgres";
    private final static String password = "Vmhs152999!";
 

   static public Connection connect() {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url, user, password);
            System.out.println("Connected to the PostgreSQL successfully.");
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        
        
 
        return conn;
    }
   static List<Object[]> getNeurotranscriptomedata() throws SQLException
   
   {
       Connection conn = connect();
        Statement stmt = conn.createStatement();
        ResultSet executeQuery = stmt.executeQuery("select * from \"shortendversionneurotranscriptomedata\"");
        List<Object[]> neurotranscriptomeList = new ArrayList<>();
        
        int columnCount = executeQuery.getMetaData().getColumnCount();
        Object[] header = new Object[columnCount];
        for (int i = 1; i < columnCount; i++) {
            header[i] = executeQuery.getMetaData().getColumnName(i);
        }
        neurotranscriptomeList.add(header);
        
        while(executeQuery.next()) {
           //Bigfivepersonalitytraitscores bigfivepersonalitytraitscores = new Bigfivepersonalitytraitscores();
           //bigfivepersonalitytraitscores.age = executeQuery.getInt("age");
           //bigfivepersonalitytraitscores.race = executeQuery.getInt("race");
           Object[] row = new Object[columnCount];
           
           for(int i = 1; i < columnCount; i++) {
            row[i] = executeQuery.getObject(i);
           }
           
           
            neurotranscriptomeList.add(row);
        }
        stmt.close();
        conn.close();
        
        return neurotranscriptomeList;
   }
   static List<Object[]> getProteomedata() throws SQLException
   
   {
       Connection conn = connect();
        Statement stmt = conn.createStatement();
        ResultSet executeQuery = stmt.executeQuery("select * from \"NeuroProteomedata\"");
        List<Object[]> neuroproteomeList = new ArrayList<>();
        
        int columnCount = executeQuery.getMetaData().getColumnCount();
        Object[] header = new Object[columnCount];
        for (int i = 1; i < columnCount; i++) {
            header[i] = executeQuery.getMetaData().getColumnName(i);
        }
        neuroproteomeList.add(header);
        
        while(executeQuery.next()) {
           //Bigfivepersonalitytraitscores bigfivepersonalitytraitscores = new Bigfivepersonalitytraitscores();
           //bigfivepersonalitytraitscores.age = executeQuery.getInt("age");
           //bigfivepersonalitytraitscores.race = executeQuery.getInt("race");
           Object[] row = new Object[columnCount];
           
           for(int i = 1; i < columnCount; i++) {
            row[i] = executeQuery.getObject(i);
           }
           
           
            neuroproteomeList.add(row);
        }
        stmt.close();
        conn.close();
        
        return neuroproteomeList;
   }
   
  
    
   static List<Object[]> getNeurogenomedata() throws SQLException
   
   {
       Connection conn = connect();
        Statement stmt = conn.createStatement();
        ResultSet executeQuery = stmt.executeQuery("select * from \"neurogenomicdata\"");
        List<Object[]> neurogenomicList = new ArrayList<>();
        
        int columnCount = executeQuery.getMetaData().getColumnCount();
        Object[] header = new Object[columnCount];
        for (int i = 1; i < columnCount; i++) {
            header[i] = executeQuery.getMetaData().getColumnName(i);
        }
        neurogenomicList.add(header);
        
        while(executeQuery.next()) {
           //Bigfivepersonalitytraitscores bigfivepersonalitytraitscores = new Bigfivepersonalitytraitscores();
           //bigfivepersonalitytraitscores.age = executeQuery.getInt("age");
           //bigfivepersonalitytraitscores.race = executeQuery.getInt("race");
           Object[] row = new Object[columnCount];
           
           for(int i = 1; i < columnCount; i++) {
            row[i] = executeQuery.getObject(i);
           }
           
           
            neurogenomicList.add(row);
        }
        stmt.close();
        conn.close();
        
        return neurogenomicList;
   }
   
    static List<Object[]> getBigFive() throws SQLException{
       Connection conn = connect();
        Statement stmt = conn.createStatement();
        ResultSet executeQuery = stmt.executeQuery("select * from \"bigfivepersonalitytraitscores\"");
        List<Object[]> bigfivepersonalitytraitscoresList = new ArrayList<>();
        
        int columnCount = executeQuery.getMetaData().getColumnCount();
        Object[] header = new Object[columnCount];
        for (int i = 1; i < columnCount; i++) {
            header[i] = executeQuery.getMetaData().getColumnName(i);
        }
        bigfivepersonalitytraitscoresList.add(header);
        
        while(executeQuery.next()) {
           //Bigfivepersonalitytraitscores bigfivepersonalitytraitscores = new Bigfivepersonalitytraitscores();
           //bigfivepersonalitytraitscores.age = executeQuery.getInt("age");
           //bigfivepersonalitytraitscores.race = executeQuery.getInt("race");
           Object[] row = new Object[columnCount];
           
           for(int i = 1; i < columnCount; i++) {
            row[i] = executeQuery.getObject(i);
           }
           
           
            bigfivepersonalitytraitscoresList.add(row);
        }
        stmt.close();
        conn.close();
        
        return bigfivepersonalitytraitscoresList;
   }
   
   public static void main(String[] args) throws SQLException{
     
       System.out.println(getBigFive().size());
   }
}
















package radiobutton;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.ScrollPane;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import javafx.event.ActionEvent;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ScrollPaneConstants;
import javax.swing.table.DefaultTableModel;

public class RadioButton extends JFrame {

    //1. Create the frame.
    JFrame frame = new JFrame("FrameDemo");

//2. Optional: What happens when the frame closes?
    //JRadioButton option1 = new JRadioButton("Linux");
    //JRadioButton option2 = new JRadioButton("Windows");
    //JRadioButton option3 = new JRadioButton("Macintosh");
    final JTextArea textarea = new JTextArea();
    JTable table = new JTable();
    final JRadioButton rb = new JRadioButton();
    final JRadioButton rb2 = new JRadioButton();
    final JRadioButton rb3 = new JRadioButton();
    final JRadioButton rb4 = new JRadioButton();
    final JRadioButton rb5 = new JRadioButton();
    JLabel label = new JLabel();

    public RadioButton() {
        frame = new JFrame();
        frame.setSize(450, 300);
//        frame.setBounds(100,100,450,300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().setLayout(null);

        textarea.setFont(new Font("Monospaced", Font.PLAIN, 14));
        textarea.setForeground(Color.GREEN);
//        textarea.setEditable(false);
        textarea.setAutoscrolls(true);
//        textarea.setBounds(82,34,5000,5000);
        JScrollPane sp; //= new JScrollPane(table);
        //sp.setBounds(200, 50, 800, 500);//first number of 4 moves the pane left to right
        //sp.add(textarea);
        //sp.add(label);
        table.setMinimumSize(new Dimension(1000, 1000));
        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        //frame.getContentPane().add(sp);

        rb.setText("Psychocognitive");
        rb.setBounds(0, 50, 200, 30); //2 number of set of 4 here moves the button up or down //3 number of set of 4 makes it so we can put in more text for the radiobutton
        rb2.setText("Neurogenomics");
        rb2.setBounds(0, 70, 200, 30);//2 number of set of 4 here moves the button up or down
        //rb3.setText("Neuroimaging");//2 number of set of 4 here moves the button up or down
        rb3.setBounds(0, 90, 200, 30);//2 number of set of 4 here moves the button up or down
        //alt-shft up or down to move line of code
        rb4.setText("Neurotranscriptomics");
        rb4.setBounds(0,110, 200, 30);
        rb5.setText("Neuroproteome");
        rb5.setBounds(0,130,200,30);
        
        frame.getContentPane().add(rb); //ctrl-shft up or down to duplicate line of code
        frame.getContentPane().add(rb2); //ctrl-shft up or down to duplicate line of code
        frame.getContentPane().add(rb3); //ctrl-shft up or down to duplicate line of code
        frame.getContentPane().add(rb4); //ctrl-shft up or down to duplicate line of code
        frame.getContentPane().add(rb5); //ctrl-shft up or down to duplicate line of code
//        frame.pack();
        frame.setVisible(true);

        rb.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                

                try {
                    List<Object[]> bigFive = DbConnection.getBigFive();
                    //((DefaultTableModel)table.getModel()).
                    Object[] header = bigFive.get(0);
                    bigFive.remove(0);
                    for(int i = 1; i < bigFive.get(0).length; i++)
                        ((DefaultTableModel)table.getModel()).addColumn(header[i]);
                    
                    
                    bigFive.forEach(o -> { ((DefaultTableModel)table.getModel()).addRow(o); });
                    //((DefaultTableModel)table.getModel()).addRow(os);
                    //String bigFives = bigFive.stream().map(b -> b.column1 + "," + b.race + "," + b.age + "," + b.engnat + "," + b.gender + "," + b.hand + "," + b. source + "," + b.country + "," + b.E1 + "," + b.E2 + "," + b.E3 + "," + b.E4 + "," + b.E5 + "," + b.E6 + "," + b.E7 + "," + b.E8 + "," + b.E9 + "," + b.E10 + "," + b.N1 + "," + b.N2 + "," + b.N3 + "," + b.N4 + ","  + b.N5 + ","  + b.N6 + "," + b.N7 + "," + b.N8 + "," + b.N9 + "," + b.N10 + "," + b.A1+ "," + b.A2 + "," + b.A3 + "," + b.A4 + "," + b.A5 + "," + b.A6 + "," + b.A7 + "," + b.A8 + "," + b.A9 + "," + b.A10 + "," + b.C1 + "," + b.C2 + "," + b.C3 + "," + b.C4 + "," + b.C5 + "," + b.C6 + "," + b.C7 + "," + b.C8 + "," + b.C9 + "," + b.C10 + "," + b.O1 + "," + b.O2 + "," + b.O3 + "," + b.O4 + "," + b.O5 + "," + b.O6 + "," + b.O7 + "," + b.O8 + "," + b.O9 + "," + b.O10).collect(Collectors.joining("\n"));
                    //of.PickMe();
                    //textarea.setText(bigFives);
                    //sp.removeAll();
                    //sp.add(table);

                            JScrollPane sp = new JScrollPane(table);
                            sp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
                sp.setBounds(200, 50, 1200, 500);//first number of 4 moves the pane left to right
                frame.getContentPane().add(sp);
                    
                } catch (Exception e) {
                    e.printStackTrace();
                }

//                JOptionPane.showMessageDialog(null, "Clicked");
            }
        });

        rb2.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent ae) {
               

                try {
                    List<Object[]> neurogenomedata = DbConnection.getNeurogenomedata();
                    //((DefaultTableModel)table.getModel()).
                    Object[] header = neurogenomedata.get(0);
                    neurogenomedata.remove(0);
                    for(int i = 1; i < neurogenomedata.get(0).length; i++)
                        ((DefaultTableModel)table.getModel()).addColumn(header[i]);
                    
                    
                    neurogenomedata.forEach(o -> { ((DefaultTableModel)table.getModel()).addRow(o); });
                    //((DefaultTableModel)table.getModel()).addRow(os);
                    //String bigFives = bigFive.stream().map(b -> b.column1 + "," + b.race + "," + b.age + "," + b.engnat + "," + b.gender + "," + b.hand + "," + b. source + "," + b.country + "," + b.E1 + "," + b.E2 + "," + b.E3 + "," + b.E4 + "," + b.E5 + "," + b.E6 + "," + b.E7 + "," + b.E8 + "," + b.E9 + "," + b.E10 + "," + b.N1 + "," + b.N2 + "," + b.N3 + "," + b.N4 + ","  + b.N5 + ","  + b.N6 + "," + b.N7 + "," + b.N8 + "," + b.N9 + "," + b.N10 + "," + b.A1+ "," + b.A2 + "," + b.A3 + "," + b.A4 + "," + b.A5 + "," + b.A6 + "," + b.A7 + "," + b.A8 + "," + b.A9 + "," + b.A10 + "," + b.C1 + "," + b.C2 + "," + b.C3 + "," + b.C4 + "," + b.C5 + "," + b.C6 + "," + b.C7 + "," + b.C8 + "," + b.C9 + "," + b.C10 + "," + b.O1 + "," + b.O2 + "," + b.O3 + "," + b.O4 + "," + b.O5 + "," + b.O6 + "," + b.O7 + "," + b.O8 + "," + b.O9 + "," + b.O10).collect(Collectors.joining("\n"));
                    //of.PickMe();
                    //textarea.setText(bigFives);
                    //sp.removeAll();
                    //sp.add(table);

                            JScrollPane sp = new JScrollPane(table);
                            sp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
                sp.setBounds(200, 50, 1200, 500);//first number of 4 moves the pane left to right
                frame.getContentPane().add(sp);
                    

                } catch (Exception e) {
                    e.printStackTrace();
                }
                

//                JOptionPane.showMessageDialog(null, "Clicked");
            }
        });
        rb3.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent ae) {
               
               

            }
        });
            
            rb4.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                
                   

                try {
                    List<Object[]> neurotranscriptomedata = DbConnection.getNeurotranscriptomedata();
                    //((DefaultTableModel)table.getModel()).
                    Object[] header = neurotranscriptomedata.get(0);
                    neurotranscriptomedata.remove(0);
                    for(int i = 1; i < neurotranscriptomedata.get(0).length; i++)
                        ((DefaultTableModel)table.getModel()).addColumn(header[i]);
                    
                    
                    neurotranscriptomedata.forEach(o -> { ((DefaultTableModel)table.getModel()).addRow(o); });
                    //((DefaultTableModel)table.getModel()).addRow(os);
                    //String bigFives = bigFive.stream().map(b -> b.column1 + "," + b.race + "," + b.age + "," + b.engnat + "," + b.gender + "," + b.hand + "," + b. source + "," + b.country + "," + b.E1 + "," + b.E2 + "," + b.E3 + "," + b.E4 + "," + b.E5 + "," + b.E6 + "," + b.E7 + "," + b.E8 + "," + b.E9 + "," + b.E10 + "," + b.N1 + "," + b.N2 + "," + b.N3 + "," + b.N4 + ","  + b.N5 + ","  + b.N6 + "," + b.N7 + "," + b.N8 + "," + b.N9 + "," + b.N10 + "," + b.A1+ "," + b.A2 + "," + b.A3 + "," + b.A4 + "," + b.A5 + "," + b.A6 + "," + b.A7 + "," + b.A8 + "," + b.A9 + "," + b.A10 + "," + b.C1 + "," + b.C2 + "," + b.C3 + "," + b.C4 + "," + b.C5 + "," + b.C6 + "," + b.C7 + "," + b.C8 + "," + b.C9 + "," + b.C10 + "," + b.O1 + "," + b.O2 + "," + b.O3 + "," + b.O4 + "," + b.O5 + "," + b.O6 + "," + b.O7 + "," + b.O8 + "," + b.O9 + "," + b.O10).collect(Collectors.joining("\n"));
                    //of.PickMe();
                    //textarea.setText(bigFives);
                    //sp.removeAll();
                    //sp.add(table);

                            JScrollPane sp = new JScrollPane(table);
                            sp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
                sp.setBounds(200, 50, 1200, 500);//first number of 4 moves the pane left to right
                frame.getContentPane().add(sp);
                    

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            });
            
            rb5.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent ae) {
                

                try {
               List<Object[]> neuroproteomedata = DbConnection.getProteomedata(); //ctrl space to get import data after DbConnection.
                    //((DefaultTableModel)table.getModel()).
                    Object[] header = neuroproteomedata.get(0);
                    neuroproteomedata.remove(0);
                    for(int i = 1; i < neuroproteomedata.get(0).length; i++)
                        ((DefaultTableModel)table.getModel()).addColumn(header[i]);
                    
                    
                    neuroproteomedata.forEach(o -> { ((DefaultTableModel)table.getModel()).addRow(o); });
                    //((DefaultTableModel)table.getModel()).addRow(os);
                    //String bigFives = bigFive.stream().map(b -> b.column1 + "," + b.race + "," + b.age + "," + b.engnat + "," + b.gender + "," + b.hand + "," + b. source + "," + b.country + "," + b.E1 + "," + b.E2 + "," + b.E3 + "," + b.E4 + "," + b.E5 + "," + b.E6 + "," + b.E7 + "," + b.E8 + "," + b.E9 + "," + b.E10 + "," + b.N1 + "," + b.N2 + "," + b.N3 + "," + b.N4 + ","  + b.N5 + ","  + b.N6 + "," + b.N7 + "," + b.N8 + "," + b.N9 + "," + b.N10 + "," + b.A1+ "," + b.A2 + "," + b.A3 + "," + b.A4 + "," + b.A5 + "," + b.A6 + "," + b.A7 + "," + b.A8 + "," + b.A9 + "," + b.A10 + "," + b.C1 + "," + b.C2 + "," + b.C3 + "," + b.C4 + "," + b.C5 + "," + b.C6 + "," + b.C7 + "," + b.C8 + "," + b.C9 + "," + b.C10 + "," + b.O1 + "," + b.O2 + "," + b.O3 + "," + b.O4 + "," + b.O5 + "," + b.O6 + "," + b.O7 + "," + b.O8 + "," + b.O9 + "," + b.O10).collect(Collectors.joining("\n"));
                    //of.PickMe();
                    //textarea.setText(bigFives);
                    //sp.removeAll();
                    //sp.add(table);

                            JScrollPane sp = new JScrollPane(table);
                            sp.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
                sp.setBounds(200, 50, 1200, 500);//first number of 4 moves the pane left to right
                frame.getContentPane().add(sp);
                    

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            });
    }
        
    /* ButtonGroup group = new ButtonGroup();
        group.add(option1);
        group.add(option2);
        group.add(option3);
 
        setLayout(new FlowLayout());
 
        add(option1);
        add(option2);
        add(option3);
 
        pack(); */
 /*class RadioButtonActionListener  {
		
		public void actionPerformed(ActionEvent event) {
			JRadioButton button = (JRadioButton) event.getSource();
			if (button == option1) {
                            if (button == option1) 
        {
            String path = "/Users/abc/Desktop/P"; // path to the directory to be opened
            File file = new File(path);
            Desktop desktop = Desktop.getDesktop();
            
            try {
    	desktop.open(file);
                } 
            catch (IOException e)
                { 
                }
         } 
				

			} else if (button == option2) {

				

			} else if (button == option3) {

				
			}
		}
	}
     */
    public static void main(String[] args) {

        RadioButton gui = new RadioButton();
    }

}
